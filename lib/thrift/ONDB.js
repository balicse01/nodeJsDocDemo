//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ondb_types');
//HELPER FUNCTIONS AND STRUCTURES

var ONDB_ping_args = function(args) {
};
ONDB_ping_args.prototype = {};
ONDB_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_ping_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_ping_result = function(args) {
};
ONDB_ping_result.prototype = {};
ONDB_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_ping_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_version_args = function(args) {
  this.whichModule = null;
  if (args) {
    if (args.whichModule !== undefined && args.whichModule !== null) {
      this.whichModule = args.whichModule;
    }
  }
};
ONDB_version_args.prototype = {};
ONDB_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.whichModule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_version_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_version_args');
  if (this.whichModule !== null && this.whichModule !== undefined) {
    output.writeFieldBegin('whichModule', Thrift.Type.I32, 1);
    output.writeI32(this.whichModule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_version_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ONDB_version_result.prototype = {};
ONDB_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_version_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_status_args = function(args) {
  this.whichModule = null;
  if (args) {
    if (args.whichModule !== undefined && args.whichModule !== null) {
      this.whichModule = args.whichModule;
    }
  }
};
ONDB_status_args.prototype = {};
ONDB_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.whichModule = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_status_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_status_args');
  if (this.whichModule !== null && this.whichModule !== undefined) {
    output.writeFieldBegin('whichModule', Thrift.Type.I32, 1);
    output.writeI32(this.whichModule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_status_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ONDB_status_result.prototype = {};
ONDB_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_status_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_shutdown_args = function(args) {
};
ONDB_shutdown_args.prototype = {};
ONDB_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_shutdown_result = function(args) {
};
ONDB_shutdown_result.prototype = {};
ONDB_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_shutdown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_verify_args = function(args) {
  this.properties = null;
  if (args) {
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = new ttypes.TVerifyProperties(args.properties);
    }
  }
};
ONDB_verify_args.prototype = {};
ONDB_verify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.properties = new ttypes.TVerifyProperties();
        this.properties.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_verify_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_verify_args');
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.STRUCT, 1);
    this.properties.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_verify_result = function(args) {
  this.success = null;
  this.uve = null;
  if (args instanceof ttypes.TUnverifiedConnectionException) {
    this.uve = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TVerifyResult(args.success);
    }
    if (args.uve !== undefined && args.uve !== null) {
      this.uve = args.uve;
    }
  }
};
ONDB_verify_result.prototype = {};
ONDB_verify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TVerifyResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uve = new ttypes.TUnverifiedConnectionException();
        this.uve.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_verify_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_verify_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.uve !== null && this.uve !== undefined) {
    output.writeFieldBegin('uve', Thrift.Type.STRUCT, 1);
    this.uve.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_put_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = new ttypes.TRow(args.row);
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_put_args.prototype = {};
ONDB_put_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_put_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_put_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_put_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TWriteResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_put_result.prototype = {};
ONDB_put_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_put_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_put_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_putIfAbsent_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = new ttypes.TRow(args.row);
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_putIfAbsent_args.prototype = {};
ONDB_putIfAbsent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfAbsent_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfAbsent_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_putIfAbsent_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TWriteResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_putIfAbsent_result.prototype = {};
ONDB_putIfAbsent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfAbsent_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfAbsent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_putIfPresent_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = new ttypes.TRow(args.row);
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_putIfPresent_args.prototype = {};
ONDB_putIfPresent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfPresent_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfPresent_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_putIfPresent_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TWriteResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_putIfPresent_result.prototype = {};
ONDB_putIfPresent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfPresent_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfPresent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_putIfVersion_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.matchVersion = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = new ttypes.TRow(args.row);
    }
    if (args.matchVersion !== undefined && args.matchVersion !== null) {
      this.matchVersion = args.matchVersion;
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_putIfVersion_args.prototype = {};
ONDB_putIfVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new ttypes.TRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.matchVersion = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfVersion_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 2);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.matchVersion !== null && this.matchVersion !== undefined) {
    output.writeFieldBegin('matchVersion', Thrift.Type.STRING, 3);
    output.writeBinary(this.matchVersion);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 4);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_putIfVersion_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TWriteResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_putIfVersion_result.prototype = {};
ONDB_putIfVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_putIfVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_putIfVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_get_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.readOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
  }
};
ONDB_get_args.prototype = {};
ONDB_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_get_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_get_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 3);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_get_result = function(args) {
  this.success = null;
  this.ce = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.ce = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TGetResult(args.success);
    }
    if (args.ce !== undefined && args.ce !== null) {
      this.ce = args.ce;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_get_result.prototype = {};
ONDB_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ce = new ttypes.TConsistencyException();
        this.ce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_get_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ce !== null && this.ce !== undefined) {
    output.writeFieldBegin('ce', Thrift.Type.STRUCT, 1);
    this.ce.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_deleteRow_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_deleteRow_args.prototype = {};
ONDB_deleteRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRow_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 3);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_deleteRow_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TWriteResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_deleteRow_result.prototype = {};
ONDB_deleteRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRow_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_deleteRowIfVersion_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.matchVersion = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.matchVersion !== undefined && args.matchVersion !== null) {
      this.matchVersion = args.matchVersion;
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_deleteRowIfVersion_args.prototype = {};
ONDB_deleteRowIfVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.matchVersion = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRowIfVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRowIfVersion_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.matchVersion !== null && this.matchVersion !== undefined) {
    output.writeFieldBegin('matchVersion', Thrift.Type.STRING, 3);
    output.writeBinary(this.matchVersion);
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 4);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_deleteRowIfVersion_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TWriteResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_deleteRowIfVersion_result.prototype = {};
ONDB_deleteRowIfVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TWriteResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_deleteRowIfVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_deleteRowIfVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_multiDelete_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTable = null;
  this.writeOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTable !== undefined && args.includedTable !== null) {
      this.includedTable = Thrift.copyList(args.includedTable, [null]);
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_multiDelete_args.prototype = {};
ONDB_multiDelete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.includedTable = [];
        var _rtmp328 = input.readListBegin();
        var _size27 = _rtmp328.size || 0;
        for (var _i29 = 0; _i29 < _size27; ++_i29) {
          var elem30 = null;
          elem30 = input.readString();
          this.includedTable.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiDelete_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiDelete_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTable !== null && this.includedTable !== undefined) {
    output.writeFieldBegin('includedTable', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTable.length);
    for (var iter31 in this.includedTable) {
      if (this.includedTable.hasOwnProperty(iter31)) {
        iter31 = this.includedTable[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 5);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_multiDelete_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_multiDelete_result.prototype = {};
ONDB_multiDelete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiDelete_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiDelete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_multiGet_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
  }
};
ONDB_multiGet_args.prototype = {};
ONDB_multiGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp333 = input.readListBegin();
        var _size32 = _rtmp333.size || 0;
        for (var _i34 = 0; _i34 < _size32; ++_i34) {
          var elem35 = null;
          elem35 = input.readString();
          this.includedTables.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGet_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGet_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter36 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter36)) {
        iter36 = this.includedTables[iter36];
        output.writeString(iter36);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_multiGet_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMultiGetResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_multiGet_result.prototype = {};
ONDB_multiGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMultiGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGet_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_multiGetKeys_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
  }
};
ONDB_multiGetKeys_args.prototype = {};
ONDB_multiGetKeys_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp338 = input.readListBegin();
        var _size37 = _rtmp338.size || 0;
        for (var _i39 = 0; _i39 < _size37; ++_i39) {
          var elem40 = null;
          elem40 = input.readString();
          this.includedTables.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGetKeys_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGetKeys_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter41 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter41)) {
        iter41 = this.includedTables[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_multiGetKeys_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TMultiGetResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
  }
};
ONDB_multiGetKeys_result.prototype = {};
ONDB_multiGetKeys_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TMultiGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_multiGetKeys_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_multiGetKeys_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableIterator_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  this.direction = null;
  this.maxResults = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.maxResults !== undefined && args.maxResults !== null) {
      this.maxResults = args.maxResults;
    }
  }
};
ONDB_tableIterator_args.prototype = {};
ONDB_tableIterator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp343 = input.readListBegin();
        var _size42 = _rtmp343.size || 0;
        for (var _i44 = 0; _i44 < _size42; ++_i44) {
          var elem45 = null;
          elem45 = input.readString();
          this.includedTables.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.maxResults = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableIterator_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableIterator_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter46 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter46)) {
        iter46 = this.includedTables[iter46];
        output.writeString(iter46);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 6);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I64, 7);
    output.writeI64(this.maxResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableIterator_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  this.ite = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TIteratorTimeoutException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TIteratorResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ite !== undefined && args.ite !== null) {
      this.ite = args.ite;
    }
  }
};
ONDB_tableIterator_result.prototype = {};
ONDB_tableIterator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TIteratorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.TIteratorTimeoutException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableIterator_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableIterator_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 6);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableIteratorMulti_args = function(args) {
  this.tableName = null;
  this.keys = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  this.direction = null;
  this.maxResults = null;
  this.numParallelIterHint = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [ttypes.TRow]);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.maxResults !== undefined && args.maxResults !== null) {
      this.maxResults = args.maxResults;
    }
    if (args.numParallelIterHint !== undefined && args.numParallelIterHint !== null) {
      this.numParallelIterHint = args.numParallelIterHint;
    }
  }
};
ONDB_tableIteratorMulti_args.prototype = {};
ONDB_tableIteratorMulti_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.keys = [];
        var _rtmp348 = input.readListBegin();
        var _size47 = _rtmp348.size || 0;
        for (var _i49 = 0; _i49 < _size47; ++_i49) {
          var elem50 = null;
          elem50 = new ttypes.TRow();
          elem50.read(input);
          this.keys.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp352 = input.readListBegin();
        var _size51 = _rtmp352.size || 0;
        for (var _i53 = 0; _i53 < _size51; ++_i53) {
          var elem54 = null;
          elem54 = input.readString();
          this.includedTables.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.maxResults = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.numParallelIterHint = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableIteratorMulti_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableIteratorMulti_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.keys.length);
    for (var iter55 in this.keys) {
      if (this.keys.hasOwnProperty(iter55)) {
        iter55 = this.keys[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter56 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter56)) {
        iter56 = this.includedTables[iter56];
        output.writeString(iter56);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 6);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I64, 7);
    output.writeI64(this.maxResults);
    output.writeFieldEnd();
  }
  if (this.numParallelIterHint !== null && this.numParallelIterHint !== undefined) {
    output.writeFieldBegin('numParallelIterHint', Thrift.Type.I32, 8);
    output.writeI32(this.numParallelIterHint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableIteratorMulti_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  this.ite = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TIteratorTimeoutException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TIteratorResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ite !== undefined && args.ite !== null) {
      this.ite = args.ite;
    }
  }
};
ONDB_tableIteratorMulti_result.prototype = {};
ONDB_tableIteratorMulti_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TIteratorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.TIteratorTimeoutException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableIteratorMulti_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableIteratorMulti_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 6);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_iteratorNext_args = function(args) {
  this.iteratorId = null;
  if (args) {
    if (args.iteratorId !== undefined && args.iteratorId !== null) {
      this.iteratorId = args.iteratorId;
    }
  }
};
ONDB_iteratorNext_args.prototype = {};
ONDB_iteratorNext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.iteratorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_iteratorNext_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_iteratorNext_args');
  if (this.iteratorId !== null && this.iteratorId !== undefined) {
    output.writeFieldBegin('iteratorId', Thrift.Type.I64, 1);
    output.writeI64(this.iteratorId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_iteratorNext_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  this.ite = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TIteratorTimeoutException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TIteratorResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ite !== undefined && args.ite !== null) {
      this.ite = args.ite;
    }
  }
};
ONDB_iteratorNext_result.prototype = {};
ONDB_iteratorNext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TIteratorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.TIteratorTimeoutException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_iteratorNext_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_iteratorNext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 6);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_iteratorClose_args = function(args) {
  this.iteratorId = null;
  if (args) {
    if (args.iteratorId !== undefined && args.iteratorId !== null) {
      this.iteratorId = args.iteratorId;
    }
  }
};
ONDB_iteratorClose_args.prototype = {};
ONDB_iteratorClose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.iteratorId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_iteratorClose_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_iteratorClose_args');
  if (this.iteratorId !== null && this.iteratorId !== undefined) {
    output.writeFieldBegin('iteratorId', Thrift.Type.I64, 1);
    output.writeI64(this.iteratorId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_iteratorClose_result = function(args) {
};
ONDB_iteratorClose_result.prototype = {};
ONDB_iteratorClose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_iteratorClose_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_iteratorClose_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableKeyIterator_args = function(args) {
  this.tableName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  this.direction = null;
  this.maxResults = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.maxResults !== undefined && args.maxResults !== null) {
      this.maxResults = args.maxResults;
    }
  }
};
ONDB_tableKeyIterator_args.prototype = {};
ONDB_tableKeyIterator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp358 = input.readListBegin();
        var _size57 = _rtmp358.size || 0;
        for (var _i59 = 0; _i59 < _size57; ++_i59) {
          var elem60 = null;
          elem60 = input.readString();
          this.includedTables.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.maxResults = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableKeyIterator_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableKeyIterator_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 2);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter61 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter61)) {
        iter61 = this.includedTables[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 6);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I64, 7);
    output.writeI64(this.maxResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableKeyIterator_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  this.tie = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TIteratorTimeoutException) {
    this.tie = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TIteratorResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.tie !== undefined && args.tie !== null) {
      this.tie = args.tie;
    }
  }
};
ONDB_tableKeyIterator_result.prototype = {};
ONDB_tableKeyIterator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TIteratorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.tie = new ttypes.TIteratorTimeoutException();
        this.tie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableKeyIterator_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableKeyIterator_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.tie !== null && this.tie !== undefined) {
    output.writeFieldBegin('tie', Thrift.Type.STRUCT, 6);
    this.tie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableKeyIteratorMulti_args = function(args) {
  this.tableName = null;
  this.keys = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  this.direction = null;
  this.maxResults = null;
  this.numParallelIterHint = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [ttypes.TRow]);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.maxResults !== undefined && args.maxResults !== null) {
      this.maxResults = args.maxResults;
    }
    if (args.numParallelIterHint !== undefined && args.numParallelIterHint !== null) {
      this.numParallelIterHint = args.numParallelIterHint;
    }
  }
};
ONDB_tableKeyIteratorMulti_args.prototype = {};
ONDB_tableKeyIteratorMulti_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.keys = [];
        var _rtmp363 = input.readListBegin();
        var _size62 = _rtmp363.size || 0;
        for (var _i64 = 0; _i64 < _size62; ++_i64) {
          var elem65 = null;
          elem65 = new ttypes.TRow();
          elem65.read(input);
          this.keys.push(elem65);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp367 = input.readListBegin();
        var _size66 = _rtmp367.size || 0;
        for (var _i68 = 0; _i68 < _size66; ++_i68) {
          var elem69 = null;
          elem69 = input.readString();
          this.includedTables.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.maxResults = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.numParallelIterHint = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableKeyIteratorMulti_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableKeyIteratorMulti_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.keys.length);
    for (var iter70 in this.keys) {
      if (this.keys.hasOwnProperty(iter70)) {
        iter70 = this.keys[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 3);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter71 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter71)) {
        iter71 = this.includedTables[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 5);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 6);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I64, 7);
    output.writeI64(this.maxResults);
    output.writeFieldEnd();
  }
  if (this.numParallelIterHint !== null && this.numParallelIterHint !== undefined) {
    output.writeFieldBegin('numParallelIterHint', Thrift.Type.I32, 8);
    output.writeI32(this.numParallelIterHint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_tableKeyIteratorMulti_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  this.tie = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TIteratorTimeoutException) {
    this.tie = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TIteratorResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.tie !== undefined && args.tie !== null) {
      this.tie = args.tie;
    }
  }
};
ONDB_tableKeyIteratorMulti_result.prototype = {};
ONDB_tableKeyIteratorMulti_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TIteratorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.tie = new ttypes.TIteratorTimeoutException();
        this.tie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_tableKeyIteratorMulti_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_tableKeyIteratorMulti_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.tie !== null && this.tie !== undefined) {
    output.writeFieldBegin('tie', Thrift.Type.STRUCT, 6);
    this.tie.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_indexIterator_args = function(args) {
  this.tableName = null;
  this.indexName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  this.direction = null;
  this.maxResults = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.indexName !== undefined && args.indexName !== null) {
      this.indexName = args.indexName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.maxResults !== undefined && args.maxResults !== null) {
      this.maxResults = args.maxResults;
    }
  }
};
ONDB_indexIterator_args.prototype = {};
ONDB_indexIterator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp373 = input.readListBegin();
        var _size72 = _rtmp373.size || 0;
        for (var _i74 = 0; _i74 < _size72; ++_i74) {
          var elem75 = null;
          elem75 = input.readString();
          this.includedTables.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.maxResults = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_indexIterator_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_indexIterator_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 2);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 3);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 4);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter76 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter76)) {
        iter76 = this.includedTables[iter76];
        output.writeString(iter76);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 6);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 7);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I64, 8);
    output.writeI64(this.maxResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_indexIterator_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  this.ite = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TIteratorTimeoutException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TIteratorResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ite !== undefined && args.ite !== null) {
      this.ite = args.ite;
    }
  }
};
ONDB_indexIterator_result.prototype = {};
ONDB_indexIterator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TIteratorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.TIteratorTimeoutException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_indexIterator_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_indexIterator_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 6);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_indexKeyIterator_args = function(args) {
  this.tableName = null;
  this.indexName = null;
  this.key = null;
  this.fieldRange = null;
  this.includedTables = null;
  this.readOptions = null;
  this.direction = null;
  this.maxResults = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.indexName !== undefined && args.indexName !== null) {
      this.indexName = args.indexName;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.TRow(args.key);
    }
    if (args.fieldRange !== undefined && args.fieldRange !== null) {
      this.fieldRange = new ttypes.TFieldRange(args.fieldRange);
    }
    if (args.includedTables !== undefined && args.includedTables !== null) {
      this.includedTables = Thrift.copyList(args.includedTables, [null]);
    }
    if (args.readOptions !== undefined && args.readOptions !== null) {
      this.readOptions = new ttypes.TReadOptions(args.readOptions);
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.maxResults !== undefined && args.maxResults !== null) {
      this.maxResults = args.maxResults;
    }
  }
};
ONDB_indexKeyIterator_args.prototype = {};
ONDB_indexKeyIterator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.indexName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.TRow();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.fieldRange = new ttypes.TFieldRange();
        this.fieldRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.includedTables = [];
        var _rtmp378 = input.readListBegin();
        var _size77 = _rtmp378.size || 0;
        for (var _i79 = 0; _i79 < _size77; ++_i79) {
          var elem80 = null;
          elem80 = input.readString();
          this.includedTables.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.readOptions = new ttypes.TReadOptions();
        this.readOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.maxResults = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_indexKeyIterator_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_indexKeyIterator_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.indexName !== null && this.indexName !== undefined) {
    output.writeFieldBegin('indexName', Thrift.Type.STRING, 2);
    output.writeString(this.indexName);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 3);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.fieldRange !== null && this.fieldRange !== undefined) {
    output.writeFieldBegin('fieldRange', Thrift.Type.STRUCT, 4);
    this.fieldRange.write(output);
    output.writeFieldEnd();
  }
  if (this.includedTables !== null && this.includedTables !== undefined) {
    output.writeFieldBegin('includedTables', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.includedTables.length);
    for (var iter81 in this.includedTables) {
      if (this.includedTables.hasOwnProperty(iter81)) {
        iter81 = this.includedTables[iter81];
        output.writeString(iter81);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.readOptions !== null && this.readOptions !== undefined) {
    output.writeFieldBegin('readOptions', Thrift.Type.STRUCT, 6);
    this.readOptions.write(output);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 7);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I64, 8);
    output.writeI64(this.maxResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_indexKeyIterator_result = function(args) {
  this.success = null;
  this.de = null;
  this.re = null;
  this.fe = null;
  this.pe = null;
  this.iae = null;
  this.ite = null;
  if (args instanceof ttypes.TConsistencyException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TRequestTimeoutException) {
    this.re = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TIteratorTimeoutException) {
    this.ite = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TIteratorResult(args.success);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.re !== undefined && args.re !== null) {
      this.re = args.re;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ite !== undefined && args.ite !== null) {
      this.ite = args.ite;
    }
  }
};
ONDB_indexKeyIterator_result.prototype = {};
ONDB_indexKeyIterator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TIteratorResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TConsistencyException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.re = new ttypes.TRequestTimeoutException();
        this.re.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ite = new ttypes.TIteratorTimeoutException();
        this.ite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_indexKeyIterator_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_indexKeyIterator_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.re !== null && this.re !== undefined) {
    output.writeFieldBegin('re', Thrift.Type.STRUCT, 2);
    this.re.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 4);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 5);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ite !== null && this.ite !== undefined) {
    output.writeFieldBegin('ite', Thrift.Type.STRUCT, 6);
    this.ite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_refreshTables_args = function(args) {
};
ONDB_refreshTables_args.prototype = {};
ONDB_refreshTables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_refreshTables_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_refreshTables_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_refreshTables_result = function(args) {
  this.fe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args) {
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
  }
};
ONDB_refreshTables_result.prototype = {};
ONDB_refreshTables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_refreshTables_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_refreshTables_result');
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeSync_args = function(args) {
  this.statement = null;
  if (args) {
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    }
  }
};
ONDB_executeSync_args.prototype = {};
ONDB_executeSync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeSync_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeSync_args');
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 1);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeSync_result = function(args) {
  this.success = null;
  this.fe = null;
  this.ise = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.ise = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResult(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.ise !== undefined && args.ise !== null) {
      this.ise = args.ise;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executeSync_result.prototype = {};
ONDB_executeSync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ise = new ttypes.TIllegalArgumentException();
        this.ise.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeSync_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeSync_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.ise !== null && this.ise !== undefined) {
    output.writeFieldBegin('ise', Thrift.Type.STRUCT, 2);
    this.ise.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_execute_args = function(args) {
  this.statement = null;
  if (args) {
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    }
  }
};
ONDB_execute_args.prototype = {};
ONDB_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_execute_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_execute_args');
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 1);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_execute_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResult(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_execute_result.prototype = {};
ONDB_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_execute_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureCancel_args = function(args) {
  this.planId = null;
  this.mayInterruptIfRunning = null;
  if (args) {
    if (args.planId !== undefined && args.planId !== null) {
      this.planId = args.planId;
    }
    if (args.mayInterruptIfRunning !== undefined && args.mayInterruptIfRunning !== null) {
      this.mayInterruptIfRunning = args.mayInterruptIfRunning;
    }
  }
};
ONDB_executionFutureCancel_args.prototype = {};
ONDB_executionFutureCancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.planId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.mayInterruptIfRunning = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureCancel_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureCancel_args');
  if (this.planId !== null && this.planId !== undefined) {
    output.writeFieldBegin('planId', Thrift.Type.I32, 1);
    output.writeI32(this.planId);
    output.writeFieldEnd();
  }
  if (this.mayInterruptIfRunning !== null && this.mayInterruptIfRunning !== undefined) {
    output.writeFieldBegin('mayInterruptIfRunning', Thrift.Type.BOOL, 2);
    output.writeBool(this.mayInterruptIfRunning);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureCancel_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureCancel_result.prototype = {};
ONDB_executionFutureCancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureCancel_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureCancel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGet_args = function(args) {
  this.planId = null;
  if (args) {
    if (args.planId !== undefined && args.planId !== null) {
      this.planId = args.planId;
    }
  }
};
ONDB_executionFutureGet_args.prototype = {};
ONDB_executionFutureGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.planId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGet_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGet_args');
  if (this.planId !== null && this.planId !== undefined) {
    output.writeFieldBegin('planId', Thrift.Type.I32, 1);
    output.writeI32(this.planId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGet_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.ce = null;
  this.ee = null;
  this.ie = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TCancellationException) {
    this.ce = args;
    return;
  }
  if (args instanceof ttypes.TExecutionException) {
    this.ee = args;
    return;
  }
  if (args instanceof ttypes.TInterruptedException) {
    this.ie = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResult(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ce !== undefined && args.ce !== null) {
      this.ce = args.ce;
    }
    if (args.ee !== undefined && args.ee !== null) {
      this.ee = args.ee;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureGet_result.prototype = {};
ONDB_executionFutureGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ce = new ttypes.TCancellationException();
        this.ce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ee = new ttypes.TExecutionException();
        this.ee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new ttypes.TInterruptedException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGet_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ce !== null && this.ce !== undefined) {
    output.writeFieldBegin('ce', Thrift.Type.STRUCT, 3);
    this.ce.write(output);
    output.writeFieldEnd();
  }
  if (this.ee !== null && this.ee !== undefined) {
    output.writeFieldBegin('ee', Thrift.Type.STRUCT, 4);
    this.ee.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 5);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 6);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGetTimeout_args = function(args) {
  this.planId = null;
  this.timeoutMs = null;
  if (args) {
    if (args.planId !== undefined && args.planId !== null) {
      this.planId = args.planId;
    }
    if (args.timeoutMs !== undefined && args.timeoutMs !== null) {
      this.timeoutMs = args.timeoutMs;
    }
  }
};
ONDB_executionFutureGetTimeout_args.prototype = {};
ONDB_executionFutureGetTimeout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.planId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGetTimeout_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGetTimeout_args');
  if (this.planId !== null && this.planId !== undefined) {
    output.writeFieldBegin('planId', Thrift.Type.I32, 1);
    output.writeI32(this.planId);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I64, 2);
    output.writeI64(this.timeoutMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGetTimeout_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.ie = null;
  this.te = null;
  this.ee = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TInterruptedException) {
    this.ie = args;
    return;
  }
  if (args instanceof ttypes.TTimeoutException) {
    this.te = args;
    return;
  }
  if (args instanceof ttypes.TExecutionException) {
    this.ee = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResult(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
    if (args.ee !== undefined && args.ee !== null) {
      this.ee = args.ee;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureGetTimeout_result.prototype = {};
ONDB_executionFutureGetTimeout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new ttypes.TInterruptedException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TTimeoutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ee = new ttypes.TExecutionException();
        this.ee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGetTimeout_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGetTimeout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 3);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 4);
    this.te.write(output);
    output.writeFieldEnd();
  }
  if (this.ee !== null && this.ee !== undefined) {
    output.writeFieldBegin('ee', Thrift.Type.STRUCT, 5);
    this.ee.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 6);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureUpdateStatus_args = function(args) {
  this.planId = null;
  if (args) {
    if (args.planId !== undefined && args.planId !== null) {
      this.planId = args.planId;
    }
  }
};
ONDB_executionFutureUpdateStatus_args.prototype = {};
ONDB_executionFutureUpdateStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.planId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureUpdateStatus_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureUpdateStatus_args');
  if (this.planId !== null && this.planId !== undefined) {
    output.writeFieldBegin('planId', Thrift.Type.I32, 1);
    output.writeI32(this.planId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureUpdateStatus_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResult(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureUpdateStatus_result.prototype = {};
ONDB_executionFutureUpdateStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureUpdateStatus_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureUpdateStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeSyncV2_args = function(args) {
  this.statement = null;
  if (args) {
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    }
  }
};
ONDB_executeSyncV2_args.prototype = {};
ONDB_executeSyncV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeSyncV2_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeSyncV2_args');
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 1);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeSyncV2_result = function(args) {
  this.success = null;
  this.fe = null;
  this.ise = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.ise = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResultV2(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.ise !== undefined && args.ise !== null) {
      this.ise = args.ise;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executeSyncV2_result.prototype = {};
ONDB_executeSyncV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResultV2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ise = new ttypes.TIllegalArgumentException();
        this.ise.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeSyncV2_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeSyncV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.ise !== null && this.ise !== undefined) {
    output.writeFieldBegin('ise', Thrift.Type.STRUCT, 2);
    this.ise.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeV2_args = function(args) {
  this.statement = null;
  if (args) {
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    }
  }
};
ONDB_executeV2_args.prototype = {};
ONDB_executeV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeV2_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeV2_args');
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 1);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeV2_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResultV2(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executeV2_result.prototype = {};
ONDB_executeV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResultV2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeV2_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureCancelV2_args = function(args) {
  this.executionId = null;
  this.mayInterruptIfRunning = null;
  if (args) {
    if (args.executionId !== undefined && args.executionId !== null) {
      this.executionId = args.executionId;
    }
    if (args.mayInterruptIfRunning !== undefined && args.mayInterruptIfRunning !== null) {
      this.mayInterruptIfRunning = args.mayInterruptIfRunning;
    }
  }
};
ONDB_executionFutureCancelV2_args.prototype = {};
ONDB_executionFutureCancelV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.mayInterruptIfRunning = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureCancelV2_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureCancelV2_args');
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 1);
    output.writeBinary(this.executionId);
    output.writeFieldEnd();
  }
  if (this.mayInterruptIfRunning !== null && this.mayInterruptIfRunning !== undefined) {
    output.writeFieldBegin('mayInterruptIfRunning', Thrift.Type.BOOL, 2);
    output.writeBool(this.mayInterruptIfRunning);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureCancelV2_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureCancelV2_result.prototype = {};
ONDB_executionFutureCancelV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureCancelV2_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureCancelV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGetV2_args = function(args) {
  this.executionId = null;
  if (args) {
    if (args.executionId !== undefined && args.executionId !== null) {
      this.executionId = args.executionId;
    }
  }
};
ONDB_executionFutureGetV2_args.prototype = {};
ONDB_executionFutureGetV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGetV2_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGetV2_args');
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 1);
    output.writeBinary(this.executionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGetV2_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.ce = null;
  this.ee = null;
  this.ie = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TCancellationException) {
    this.ce = args;
    return;
  }
  if (args instanceof ttypes.TExecutionException) {
    this.ee = args;
    return;
  }
  if (args instanceof ttypes.TInterruptedException) {
    this.ie = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResultV2(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ce !== undefined && args.ce !== null) {
      this.ce = args.ce;
    }
    if (args.ee !== undefined && args.ee !== null) {
      this.ee = args.ee;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureGetV2_result.prototype = {};
ONDB_executionFutureGetV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResultV2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ce = new ttypes.TCancellationException();
        this.ce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ee = new ttypes.TExecutionException();
        this.ee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new ttypes.TInterruptedException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGetV2_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGetV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ce !== null && this.ce !== undefined) {
    output.writeFieldBegin('ce', Thrift.Type.STRUCT, 3);
    this.ce.write(output);
    output.writeFieldEnd();
  }
  if (this.ee !== null && this.ee !== undefined) {
    output.writeFieldBegin('ee', Thrift.Type.STRUCT, 4);
    this.ee.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 5);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 6);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGetTimeoutV2_args = function(args) {
  this.executionId = null;
  this.timeoutMs = null;
  if (args) {
    if (args.executionId !== undefined && args.executionId !== null) {
      this.executionId = args.executionId;
    }
    if (args.timeoutMs !== undefined && args.timeoutMs !== null) {
      this.timeoutMs = args.timeoutMs;
    }
  }
};
ONDB_executionFutureGetTimeoutV2_args.prototype = {};
ONDB_executionFutureGetTimeoutV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timeoutMs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGetTimeoutV2_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGetTimeoutV2_args');
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 1);
    output.writeBinary(this.executionId);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I64, 2);
    output.writeI64(this.timeoutMs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureGetTimeoutV2_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.ie = null;
  this.te = null;
  this.ee = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TInterruptedException) {
    this.ie = args;
    return;
  }
  if (args instanceof ttypes.TTimeoutException) {
    this.te = args;
    return;
  }
  if (args instanceof ttypes.TExecutionException) {
    this.ee = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResultV2(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.ie !== undefined && args.ie !== null) {
      this.ie = args.ie;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = args.te;
    }
    if (args.ee !== undefined && args.ee !== null) {
      this.ee = args.ee;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureGetTimeoutV2_result.prototype = {};
ONDB_executionFutureGetTimeoutV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResultV2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ie = new ttypes.TInterruptedException();
        this.ie.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TTimeoutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ee = new ttypes.TExecutionException();
        this.ee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureGetTimeoutV2_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureGetTimeoutV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.ie !== null && this.ie !== undefined) {
    output.writeFieldBegin('ie', Thrift.Type.STRUCT, 3);
    this.ie.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 4);
    this.te.write(output);
    output.writeFieldEnd();
  }
  if (this.ee !== null && this.ee !== undefined) {
    output.writeFieldBegin('ee', Thrift.Type.STRUCT, 5);
    this.ee.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 6);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureUpdateStatusV2_args = function(args) {
  this.executionId = null;
  if (args) {
    if (args.executionId !== undefined && args.executionId !== null) {
      this.executionId = args.executionId;
    }
  }
};
ONDB_executionFutureUpdateStatusV2_args.prototype = {};
ONDB_executionFutureUpdateStatusV2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureUpdateStatusV2_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureUpdateStatusV2_args');
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 1);
    output.writeBinary(this.executionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executionFutureUpdateStatusV2_result = function(args) {
  this.success = null;
  this.fe = null;
  this.iae = null;
  this.pe = null;
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TStatementResultV2(args.success);
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executionFutureUpdateStatusV2_result.prototype = {};
ONDB_executionFutureUpdateStatusV2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TStatementResultV2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executionFutureUpdateStatusV2_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executionFutureUpdateStatusV2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 2);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 3);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeUpdates_args = function(args) {
  this.operations = null;
  this.writeOptions = null;
  if (args) {
    if (args.operations !== undefined && args.operations !== null) {
      this.operations = Thrift.copyList(args.operations, [ttypes.TOperation]);
    }
    if (args.writeOptions !== undefined && args.writeOptions !== null) {
      this.writeOptions = new ttypes.TWriteOptions(args.writeOptions);
    }
  }
};
ONDB_executeUpdates_args.prototype = {};
ONDB_executeUpdates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.operations = [];
        var _rtmp383 = input.readListBegin();
        var _size82 = _rtmp383.size || 0;
        for (var _i84 = 0; _i84 < _size82; ++_i84) {
          var elem85 = null;
          elem85 = new ttypes.TOperation();
          elem85.read(input);
          this.operations.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.writeOptions = new ttypes.TWriteOptions();
        this.writeOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeUpdates_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeUpdates_args');
  if (this.operations !== null && this.operations !== undefined) {
    output.writeFieldBegin('operations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.operations.length);
    for (var iter86 in this.operations) {
      if (this.operations.hasOwnProperty(iter86)) {
        iter86 = this.operations[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.writeOptions !== null && this.writeOptions !== undefined) {
    output.writeFieldBegin('writeOptions', Thrift.Type.STRUCT, 2);
    this.writeOptions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_executeUpdates_result = function(args) {
  this.success = null;
  this.de = null;
  this.toee = null;
  this.fe = null;
  this.iae = null;
  this.pe = null;
  if (args instanceof ttypes.TDurabilityException) {
    this.de = args;
    return;
  }
  if (args instanceof ttypes.TTableOpExecutionException) {
    this.toee = args;
    return;
  }
  if (args instanceof ttypes.TFaultException) {
    this.fe = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgumentException) {
    this.iae = args;
    return;
  }
  if (args instanceof ttypes.TProxyException) {
    this.pe = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TWriteResult]);
    }
    if (args.de !== undefined && args.de !== null) {
      this.de = args.de;
    }
    if (args.toee !== undefined && args.toee !== null) {
      this.toee = args.toee;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = args.fe;
    }
    if (args.iae !== undefined && args.iae !== null) {
      this.iae = args.iae;
    }
    if (args.pe !== undefined && args.pe !== null) {
      this.pe = args.pe;
    }
  }
};
ONDB_executeUpdates_result.prototype = {};
ONDB_executeUpdates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp388 = input.readListBegin();
        var _size87 = _rtmp388.size || 0;
        for (var _i89 = 0; _i89 < _size87; ++_i89) {
          var elem90 = null;
          elem90 = new ttypes.TWriteResult();
          elem90.read(input);
          this.success.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.de = new ttypes.TDurabilityException();
        this.de.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.toee = new ttypes.TTableOpExecutionException();
        this.toee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.TFaultException();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.iae = new ttypes.TIllegalArgumentException();
        this.iae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.pe = new ttypes.TProxyException();
        this.pe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_executeUpdates_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_executeUpdates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter91 in this.success) {
      if (this.success.hasOwnProperty(iter91)) {
        iter91 = this.success[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.de !== null && this.de !== undefined) {
    output.writeFieldBegin('de', Thrift.Type.STRUCT, 1);
    this.de.write(output);
    output.writeFieldEnd();
  }
  if (this.toee !== null && this.toee !== undefined) {
    output.writeFieldBegin('toee', Thrift.Type.STRUCT, 2);
    this.toee.write(output);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 3);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  if (this.iae !== null && this.iae !== undefined) {
    output.writeFieldBegin('iae', Thrift.Type.STRUCT, 4);
    this.iae.write(output);
    output.writeFieldEnd();
  }
  if (this.pe !== null && this.pe !== undefined) {
    output.writeFieldBegin('pe', Thrift.Type.STRUCT, 5);
    this.pe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_getOptions_args = function(args) {
};
ONDB_getOptions_args.prototype = {};
ONDB_getOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_getOptions_args.prototype.write = function(output) {
  output.writeStructBegin('ONDB_getOptions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDB_getOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
ONDB_getOptions_result.prototype = {};
ONDB_getOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        this.success = {};
        var _rtmp393 = input.readMapBegin();
        var _size92 = _rtmp393.size || 0;
        for (var _i94 = 0; _i94 < _size92; ++_i94) {
          var key95 = null;
          var val96 = null;
          key95 = input.readString();
          val96 = input.readString();
          this.success[key95] = val96;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ONDB_getOptions_result.prototype.write = function(output) {
  output.writeStructBegin('ONDB_getOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter97 in this.success) {
      if (this.success.hasOwnProperty(kiter97)) {
        var viter98 = this.success[kiter97];
        output.writeString(kiter97);
        output.writeString(viter98);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ONDBClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
ONDBClient.prototype = {};
ONDBClient.prototype.seqid = function() { return this._seqid; };
ONDBClient.prototype.new_seqid = function() { return this._seqid += 1; };

ONDBClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

ONDBClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  var args = new ONDB_ping_args();
  try {
    output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ONDBClient.prototype.version = function(whichModule, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_version(whichModule);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_version(whichModule);
  }
};

ONDBClient.prototype.send_version = function(whichModule) {
  var output = new this.pClass(this.output);
  var params = {
    whichModule: whichModule
  };
  var args = new ONDB_version_args(params);
  try {
    output.writeMessageBegin('version', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('version failed: unknown result');
};

ONDBClient.prototype.status = function(whichModule, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_status(whichModule);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_status(whichModule);
  }
};

ONDBClient.prototype.send_status = function(whichModule) {
  var output = new this.pClass(this.output);
  var params = {
    whichModule: whichModule
  };
  var args = new ONDB_status_args(params);
  try {
    output.writeMessageBegin('status', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('status failed: unknown result');
};

ONDBClient.prototype.shutdown = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shutdown();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shutdown();
  }
};

ONDBClient.prototype.send_shutdown = function() {
  var output = new this.pClass(this.output);
  var args = new ONDB_shutdown_args();
  try {
    output.writeMessageBegin('shutdown', Thrift.MessageType.ONEWAY, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    this.output.flush();
    var callback = this._reqs[this.seqid()] || function() {};
    delete this._reqs[this.seqid()];
    callback(null);
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.verify = function(properties, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verify(properties);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verify(properties);
  }
};

ONDBClient.prototype.send_verify = function(properties) {
  var output = new this.pClass(this.output);
  var params = {
    properties: properties
  };
  var args = new ONDB_verify_args(params);
  try {
    output.writeMessageBegin('verify', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_verify = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_verify_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.uve) {
    return callback(result.uve);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verify failed: unknown result');
};

ONDBClient.prototype.put = function(tableName, row, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_put(tableName, row, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_put(tableName, row, writeOptions);
  }
};

ONDBClient.prototype.send_put = function(tableName, row, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    writeOptions: writeOptions
  };
  var args = new ONDB_put_args(params);
  try {
    output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_put = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_put_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('put failed: unknown result');
};

ONDBClient.prototype.putIfAbsent = function(tableName, row, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putIfAbsent(tableName, row, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putIfAbsent(tableName, row, writeOptions);
  }
};

ONDBClient.prototype.send_putIfAbsent = function(tableName, row, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    writeOptions: writeOptions
  };
  var args = new ONDB_putIfAbsent_args(params);
  try {
    output.writeMessageBegin('putIfAbsent', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_putIfAbsent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_putIfAbsent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putIfAbsent failed: unknown result');
};

ONDBClient.prototype.putIfPresent = function(tableName, row, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putIfPresent(tableName, row, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putIfPresent(tableName, row, writeOptions);
  }
};

ONDBClient.prototype.send_putIfPresent = function(tableName, row, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    writeOptions: writeOptions
  };
  var args = new ONDB_putIfPresent_args(params);
  try {
    output.writeMessageBegin('putIfPresent', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_putIfPresent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_putIfPresent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putIfPresent failed: unknown result');
};

ONDBClient.prototype.putIfVersion = function(tableName, row, matchVersion, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putIfVersion(tableName, row, matchVersion, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putIfVersion(tableName, row, matchVersion, writeOptions);
  }
};

ONDBClient.prototype.send_putIfVersion = function(tableName, row, matchVersion, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    row: row,
    matchVersion: matchVersion,
    writeOptions: writeOptions
  };
  var args = new ONDB_putIfVersion_args(params);
  try {
    output.writeMessageBegin('putIfVersion', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_putIfVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_putIfVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putIfVersion failed: unknown result');
};

ONDBClient.prototype.get = function(tableName, key, readOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get(tableName, key, readOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get(tableName, key, readOptions);
  }
};

ONDBClient.prototype.send_get = function(tableName, key, readOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    readOptions: readOptions
  };
  var args = new ONDB_get_args(params);
  try {
    output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ce) {
    return callback(result.ce);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};

ONDBClient.prototype.deleteRow = function(tableName, key, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteRow(tableName, key, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteRow(tableName, key, writeOptions);
  }
};

ONDBClient.prototype.send_deleteRow = function(tableName, key, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    writeOptions: writeOptions
  };
  var args = new ONDB_deleteRow_args(params);
  try {
    output.writeMessageBegin('deleteRow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_deleteRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_deleteRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteRow failed: unknown result');
};

ONDBClient.prototype.deleteRowIfVersion = function(tableName, key, matchVersion, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteRowIfVersion(tableName, key, matchVersion, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteRowIfVersion(tableName, key, matchVersion, writeOptions);
  }
};

ONDBClient.prototype.send_deleteRowIfVersion = function(tableName, key, matchVersion, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    matchVersion: matchVersion,
    writeOptions: writeOptions
  };
  var args = new ONDB_deleteRowIfVersion_args(params);
  try {
    output.writeMessageBegin('deleteRowIfVersion', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_deleteRowIfVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_deleteRowIfVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteRowIfVersion failed: unknown result');
};

ONDBClient.prototype.multiDelete = function(tableName, key, fieldRange, includedTable, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multiDelete(tableName, key, fieldRange, includedTable, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multiDelete(tableName, key, fieldRange, includedTable, writeOptions);
  }
};

ONDBClient.prototype.send_multiDelete = function(tableName, key, fieldRange, includedTable, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    fieldRange: fieldRange,
    includedTable: includedTable,
    writeOptions: writeOptions
  };
  var args = new ONDB_multiDelete_args(params);
  try {
    output.writeMessageBegin('multiDelete', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_multiDelete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_multiDelete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiDelete failed: unknown result');
};

ONDBClient.prototype.multiGet = function(tableName, key, fieldRange, includedTables, readOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multiGet(tableName, key, fieldRange, includedTables, readOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multiGet(tableName, key, fieldRange, includedTables, readOptions);
  }
};

ONDBClient.prototype.send_multiGet = function(tableName, key, fieldRange, includedTables, readOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions
  };
  var args = new ONDB_multiGet_args(params);
  try {
    output.writeMessageBegin('multiGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_multiGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_multiGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiGet failed: unknown result');
};

ONDBClient.prototype.multiGetKeys = function(tableName, key, fieldRange, includedTables, readOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_multiGetKeys(tableName, key, fieldRange, includedTables, readOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_multiGetKeys(tableName, key, fieldRange, includedTables, readOptions);
  }
};

ONDBClient.prototype.send_multiGetKeys = function(tableName, key, fieldRange, includedTables, readOptions) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions
  };
  var args = new ONDB_multiGetKeys_args(params);
  try {
    output.writeMessageBegin('multiGetKeys', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_multiGetKeys = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_multiGetKeys_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiGetKeys failed: unknown result');
};

ONDBClient.prototype.tableIterator = function(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_tableIterator(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_tableIterator(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults);
  }
};

ONDBClient.prototype.send_tableIterator = function(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions,
    direction: direction,
    maxResults: maxResults
  };
  var args = new ONDB_tableIterator_args(params);
  try {
    output.writeMessageBegin('tableIterator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_tableIterator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_tableIterator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tableIterator failed: unknown result');
};

ONDBClient.prototype.tableIteratorMulti = function(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_tableIteratorMulti(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_tableIteratorMulti(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint);
  }
};

ONDBClient.prototype.send_tableIteratorMulti = function(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    keys: keys,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions,
    direction: direction,
    maxResults: maxResults,
    numParallelIterHint: numParallelIterHint
  };
  var args = new ONDB_tableIteratorMulti_args(params);
  try {
    output.writeMessageBegin('tableIteratorMulti', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_tableIteratorMulti = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_tableIteratorMulti_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tableIteratorMulti failed: unknown result');
};

ONDBClient.prototype.iteratorNext = function(iteratorId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_iteratorNext(iteratorId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_iteratorNext(iteratorId);
  }
};

ONDBClient.prototype.send_iteratorNext = function(iteratorId) {
  var output = new this.pClass(this.output);
  var params = {
    iteratorId: iteratorId
  };
  var args = new ONDB_iteratorNext_args(params);
  try {
    output.writeMessageBegin('iteratorNext', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_iteratorNext = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_iteratorNext_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('iteratorNext failed: unknown result');
};

ONDBClient.prototype.iteratorClose = function(iteratorId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_iteratorClose(iteratorId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_iteratorClose(iteratorId);
  }
};

ONDBClient.prototype.send_iteratorClose = function(iteratorId) {
  var output = new this.pClass(this.output);
  var params = {
    iteratorId: iteratorId
  };
  var args = new ONDB_iteratorClose_args(params);
  try {
    output.writeMessageBegin('iteratorClose', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_iteratorClose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_iteratorClose_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

ONDBClient.prototype.tableKeyIterator = function(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_tableKeyIterator(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_tableKeyIterator(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults);
  }
};

ONDBClient.prototype.send_tableKeyIterator = function(tableName, key, fieldRange, includedTables, readOptions, direction, maxResults) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    key: key,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions,
    direction: direction,
    maxResults: maxResults
  };
  var args = new ONDB_tableKeyIterator_args(params);
  try {
    output.writeMessageBegin('tableKeyIterator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_tableKeyIterator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_tableKeyIterator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.tie) {
    return callback(result.tie);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tableKeyIterator failed: unknown result');
};

ONDBClient.prototype.tableKeyIteratorMulti = function(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_tableKeyIteratorMulti(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_tableKeyIteratorMulti(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint);
  }
};

ONDBClient.prototype.send_tableKeyIteratorMulti = function(tableName, keys, fieldRange, includedTables, readOptions, direction, maxResults, numParallelIterHint) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    keys: keys,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions,
    direction: direction,
    maxResults: maxResults,
    numParallelIterHint: numParallelIterHint
  };
  var args = new ONDB_tableKeyIteratorMulti_args(params);
  try {
    output.writeMessageBegin('tableKeyIteratorMulti', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_tableKeyIteratorMulti = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_tableKeyIteratorMulti_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.tie) {
    return callback(result.tie);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tableKeyIteratorMulti failed: unknown result');
};

ONDBClient.prototype.indexIterator = function(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_indexIterator(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_indexIterator(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults);
  }
};

ONDBClient.prototype.send_indexIterator = function(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    indexName: indexName,
    key: key,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions,
    direction: direction,
    maxResults: maxResults
  };
  var args = new ONDB_indexIterator_args(params);
  try {
    output.writeMessageBegin('indexIterator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_indexIterator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_indexIterator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('indexIterator failed: unknown result');
};

ONDBClient.prototype.indexKeyIterator = function(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_indexKeyIterator(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_indexKeyIterator(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults);
  }
};

ONDBClient.prototype.send_indexKeyIterator = function(tableName, indexName, key, fieldRange, includedTables, readOptions, direction, maxResults) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    indexName: indexName,
    key: key,
    fieldRange: fieldRange,
    includedTables: includedTables,
    readOptions: readOptions,
    direction: direction,
    maxResults: maxResults
  };
  var args = new ONDB_indexKeyIterator_args(params);
  try {
    output.writeMessageBegin('indexKeyIterator', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_indexKeyIterator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_indexKeyIterator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.re) {
    return callback(result.re);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ite) {
    return callback(result.ite);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('indexKeyIterator failed: unknown result');
};

ONDBClient.prototype.refreshTables = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_refreshTables();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_refreshTables();
  }
};

ONDBClient.prototype.send_refreshTables = function() {
  var output = new this.pClass(this.output);
  var args = new ONDB_refreshTables_args();
  try {
    output.writeMessageBegin('refreshTables', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_refreshTables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_refreshTables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  callback(null);
};

ONDBClient.prototype.executeSync = function(statement, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeSync(statement);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeSync(statement);
  }
};

ONDBClient.prototype.send_executeSync = function(statement) {
  var output = new this.pClass(this.output);
  var params = {
    statement: statement
  };
  var args = new ONDB_executeSync_args(params);
  try {
    output.writeMessageBegin('executeSync', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executeSync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executeSync_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.ise) {
    return callback(result.ise);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executeSync failed: unknown result');
};

ONDBClient.prototype.execute = function(statement, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_execute(statement);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_execute(statement);
  }
};

ONDBClient.prototype.send_execute = function(statement) {
  var output = new this.pClass(this.output);
  var params = {
    statement: statement
  };
  var args = new ONDB_execute_args(params);
  try {
    output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_execute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_execute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute failed: unknown result');
};

ONDBClient.prototype.executionFutureCancel = function(planId, mayInterruptIfRunning, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureCancel(planId, mayInterruptIfRunning);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureCancel(planId, mayInterruptIfRunning);
  }
};

ONDBClient.prototype.send_executionFutureCancel = function(planId, mayInterruptIfRunning) {
  var output = new this.pClass(this.output);
  var params = {
    planId: planId,
    mayInterruptIfRunning: mayInterruptIfRunning
  };
  var args = new ONDB_executionFutureCancel_args(params);
  try {
    output.writeMessageBegin('executionFutureCancel', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureCancel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureCancel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureCancel failed: unknown result');
};

ONDBClient.prototype.executionFutureGet = function(planId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureGet(planId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureGet(planId);
  }
};

ONDBClient.prototype.send_executionFutureGet = function(planId) {
  var output = new this.pClass(this.output);
  var params = {
    planId: planId
  };
  var args = new ONDB_executionFutureGet_args(params);
  try {
    output.writeMessageBegin('executionFutureGet', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ce) {
    return callback(result.ce);
  }
  if (null !== result.ee) {
    return callback(result.ee);
  }
  if (null !== result.ie) {
    return callback(result.ie);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureGet failed: unknown result');
};

ONDBClient.prototype.executionFutureGetTimeout = function(planId, timeoutMs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureGetTimeout(planId, timeoutMs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureGetTimeout(planId, timeoutMs);
  }
};

ONDBClient.prototype.send_executionFutureGetTimeout = function(planId, timeoutMs) {
  var output = new this.pClass(this.output);
  var params = {
    planId: planId,
    timeoutMs: timeoutMs
  };
  var args = new ONDB_executionFutureGetTimeout_args(params);
  try {
    output.writeMessageBegin('executionFutureGetTimeout', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureGetTimeout = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureGetTimeout_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ie) {
    return callback(result.ie);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.ee) {
    return callback(result.ee);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureGetTimeout failed: unknown result');
};

ONDBClient.prototype.executionFutureUpdateStatus = function(planId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureUpdateStatus(planId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureUpdateStatus(planId);
  }
};

ONDBClient.prototype.send_executionFutureUpdateStatus = function(planId) {
  var output = new this.pClass(this.output);
  var params = {
    planId: planId
  };
  var args = new ONDB_executionFutureUpdateStatus_args(params);
  try {
    output.writeMessageBegin('executionFutureUpdateStatus', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureUpdateStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureUpdateStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureUpdateStatus failed: unknown result');
};

ONDBClient.prototype.executeSyncV2 = function(statement, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeSyncV2(statement);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeSyncV2(statement);
  }
};

ONDBClient.prototype.send_executeSyncV2 = function(statement) {
  var output = new this.pClass(this.output);
  var params = {
    statement: statement
  };
  var args = new ONDB_executeSyncV2_args(params);
  try {
    output.writeMessageBegin('executeSyncV2', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executeSyncV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executeSyncV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.ise) {
    return callback(result.ise);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executeSyncV2 failed: unknown result');
};

ONDBClient.prototype.executeV2 = function(statement, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeV2(statement);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeV2(statement);
  }
};

ONDBClient.prototype.send_executeV2 = function(statement) {
  var output = new this.pClass(this.output);
  var params = {
    statement: statement
  };
  var args = new ONDB_executeV2_args(params);
  try {
    output.writeMessageBegin('executeV2', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executeV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executeV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executeV2 failed: unknown result');
};

ONDBClient.prototype.executionFutureCancelV2 = function(executionId, mayInterruptIfRunning, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureCancelV2(executionId, mayInterruptIfRunning);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureCancelV2(executionId, mayInterruptIfRunning);
  }
};

ONDBClient.prototype.send_executionFutureCancelV2 = function(executionId, mayInterruptIfRunning) {
  var output = new this.pClass(this.output);
  var params = {
    executionId: executionId,
    mayInterruptIfRunning: mayInterruptIfRunning
  };
  var args = new ONDB_executionFutureCancelV2_args(params);
  try {
    output.writeMessageBegin('executionFutureCancelV2', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureCancelV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureCancelV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureCancelV2 failed: unknown result');
};

ONDBClient.prototype.executionFutureGetV2 = function(executionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureGetV2(executionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureGetV2(executionId);
  }
};

ONDBClient.prototype.send_executionFutureGetV2 = function(executionId) {
  var output = new this.pClass(this.output);
  var params = {
    executionId: executionId
  };
  var args = new ONDB_executionFutureGetV2_args(params);
  try {
    output.writeMessageBegin('executionFutureGetV2', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureGetV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureGetV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ce) {
    return callback(result.ce);
  }
  if (null !== result.ee) {
    return callback(result.ee);
  }
  if (null !== result.ie) {
    return callback(result.ie);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureGetV2 failed: unknown result');
};

ONDBClient.prototype.executionFutureGetTimeoutV2 = function(executionId, timeoutMs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureGetTimeoutV2(executionId, timeoutMs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureGetTimeoutV2(executionId, timeoutMs);
  }
};

ONDBClient.prototype.send_executionFutureGetTimeoutV2 = function(executionId, timeoutMs) {
  var output = new this.pClass(this.output);
  var params = {
    executionId: executionId,
    timeoutMs: timeoutMs
  };
  var args = new ONDB_executionFutureGetTimeoutV2_args(params);
  try {
    output.writeMessageBegin('executionFutureGetTimeoutV2', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureGetTimeoutV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureGetTimeoutV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.ie) {
    return callback(result.ie);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.ee) {
    return callback(result.ee);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureGetTimeoutV2 failed: unknown result');
};

ONDBClient.prototype.executionFutureUpdateStatusV2 = function(executionId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executionFutureUpdateStatusV2(executionId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executionFutureUpdateStatusV2(executionId);
  }
};

ONDBClient.prototype.send_executionFutureUpdateStatusV2 = function(executionId) {
  var output = new this.pClass(this.output);
  var params = {
    executionId: executionId
  };
  var args = new ONDB_executionFutureUpdateStatusV2_args(params);
  try {
    output.writeMessageBegin('executionFutureUpdateStatusV2', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executionFutureUpdateStatusV2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executionFutureUpdateStatusV2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executionFutureUpdateStatusV2 failed: unknown result');
};

ONDBClient.prototype.executeUpdates = function(operations, writeOptions, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeUpdates(operations, writeOptions);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeUpdates(operations, writeOptions);
  }
};

ONDBClient.prototype.send_executeUpdates = function(operations, writeOptions) {
  var output = new this.pClass(this.output);
  var params = {
    operations: operations,
    writeOptions: writeOptions
  };
  var args = new ONDB_executeUpdates_args(params);
  try {
    output.writeMessageBegin('executeUpdates', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_executeUpdates = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_executeUpdates_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.de) {
    return callback(result.de);
  }
  if (null !== result.toee) {
    return callback(result.toee);
  }
  if (null !== result.fe) {
    return callback(result.fe);
  }
  if (null !== result.iae) {
    return callback(result.iae);
  }
  if (null !== result.pe) {
    return callback(result.pe);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executeUpdates failed: unknown result');
};

ONDBClient.prototype.getOptions = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOptions();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOptions();
  }
};

ONDBClient.prototype.send_getOptions = function() {
  var output = new this.pClass(this.output);
  var args = new ONDB_getOptions_args();
  try {
    output.writeMessageBegin('getOptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

ONDBClient.prototype.recv_getOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ONDB_getOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptions failed: unknown result');
};
var ONDBProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
ONDBProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
ONDBProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new ONDB_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ONDB_ping_result({success: result});
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.ping(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ONDB_ping_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_version = function(seqid, input, output) {
  var args = new ONDB_version_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.version.length === 1) {
    Q.fcall(this._handler.version.bind(this._handler),
      args.whichModule
    ).then(function(result) {
      var result_obj = new ONDB_version_result({success: result});
      output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.version(args.whichModule, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ONDB_version_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("version", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("version", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_status = function(seqid, input, output) {
  var args = new ONDB_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.status.length === 1) {
    Q.fcall(this._handler.status.bind(this._handler),
      args.whichModule
    ).then(function(result) {
      var result_obj = new ONDB_status_result({success: result});
      output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("status", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.status(args.whichModule, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ONDB_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new ONDB_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.shutdown();
};
ONDBProcessor.prototype.process_verify = function(seqid, input, output) {
  var args = new ONDB_verify_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verify.length === 1) {
    Q.fcall(this._handler.verify.bind(this._handler),
      args.properties
    ).then(function(result) {
      var result_obj = new ONDB_verify_result({success: result});
      output.writeMessageBegin("verify", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TUnverifiedConnectionException) {
        result = new ONDB_verify_result(err);
        output.writeMessageBegin("verify", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verify(args.properties, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TUnverifiedConnectionException) {
        result_obj = new ONDB_verify_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verify", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_put = function(seqid, input, output) {
  var args = new ONDB_put_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.put.length === 3) {
    Q.fcall(this._handler.put.bind(this._handler),
      args.tableName,
      args.row,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_put_result({success: result});
      output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_put_result(err);
        output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.put(args.tableName, args.row, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_put_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_putIfAbsent = function(seqid, input, output) {
  var args = new ONDB_putIfAbsent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putIfAbsent.length === 3) {
    Q.fcall(this._handler.putIfAbsent.bind(this._handler),
      args.tableName,
      args.row,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_putIfAbsent_result({success: result});
      output.writeMessageBegin("putIfAbsent", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_putIfAbsent_result(err);
        output.writeMessageBegin("putIfAbsent", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putIfAbsent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.putIfAbsent(args.tableName, args.row, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_putIfAbsent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putIfAbsent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putIfAbsent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_putIfPresent = function(seqid, input, output) {
  var args = new ONDB_putIfPresent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putIfPresent.length === 3) {
    Q.fcall(this._handler.putIfPresent.bind(this._handler),
      args.tableName,
      args.row,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_putIfPresent_result({success: result});
      output.writeMessageBegin("putIfPresent", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_putIfPresent_result(err);
        output.writeMessageBegin("putIfPresent", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putIfPresent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.putIfPresent(args.tableName, args.row, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_putIfPresent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putIfPresent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putIfPresent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_putIfVersion = function(seqid, input, output) {
  var args = new ONDB_putIfVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putIfVersion.length === 4) {
    Q.fcall(this._handler.putIfVersion.bind(this._handler),
      args.tableName,
      args.row,
      args.matchVersion,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_putIfVersion_result({success: result});
      output.writeMessageBegin("putIfVersion", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_putIfVersion_result(err);
        output.writeMessageBegin("putIfVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putIfVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.putIfVersion(args.tableName, args.row, args.matchVersion, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_putIfVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putIfVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putIfVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new ONDB_get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get.length === 3) {
    Q.fcall(this._handler.get.bind(this._handler),
      args.tableName,
      args.key,
      args.readOptions
    ).then(function(result) {
      var result_obj = new ONDB_get_result({success: result});
      output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_get_result(err);
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get(args.tableName, args.key, args.readOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_get_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_deleteRow = function(seqid, input, output) {
  var args = new ONDB_deleteRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteRow.length === 3) {
    Q.fcall(this._handler.deleteRow.bind(this._handler),
      args.tableName,
      args.key,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_deleteRow_result({success: result});
      output.writeMessageBegin("deleteRow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_deleteRow_result(err);
        output.writeMessageBegin("deleteRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteRow(args.tableName, args.key, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_deleteRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_deleteRowIfVersion = function(seqid, input, output) {
  var args = new ONDB_deleteRowIfVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteRowIfVersion.length === 4) {
    Q.fcall(this._handler.deleteRowIfVersion.bind(this._handler),
      args.tableName,
      args.key,
      args.matchVersion,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_deleteRowIfVersion_result({success: result});
      output.writeMessageBegin("deleteRowIfVersion", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_deleteRowIfVersion_result(err);
        output.writeMessageBegin("deleteRowIfVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteRowIfVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteRowIfVersion(args.tableName, args.key, args.matchVersion, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_deleteRowIfVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteRowIfVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteRowIfVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_multiDelete = function(seqid, input, output) {
  var args = new ONDB_multiDelete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multiDelete.length === 5) {
    Q.fcall(this._handler.multiDelete.bind(this._handler),
      args.tableName,
      args.key,
      args.fieldRange,
      args.includedTable,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_multiDelete_result({success: result});
      output.writeMessageBegin("multiDelete", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_multiDelete_result(err);
        output.writeMessageBegin("multiDelete", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiDelete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.multiDelete(args.tableName, args.key, args.fieldRange, args.includedTable, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_multiDelete_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("multiDelete", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiDelete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_multiGet = function(seqid, input, output) {
  var args = new ONDB_multiGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multiGet.length === 5) {
    Q.fcall(this._handler.multiGet.bind(this._handler),
      args.tableName,
      args.key,
      args.fieldRange,
      args.includedTables,
      args.readOptions
    ).then(function(result) {
      var result_obj = new ONDB_multiGet_result({success: result});
      output.writeMessageBegin("multiGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_multiGet_result(err);
        output.writeMessageBegin("multiGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.multiGet(args.tableName, args.key, args.fieldRange, args.includedTables, args.readOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_multiGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("multiGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_multiGetKeys = function(seqid, input, output) {
  var args = new ONDB_multiGetKeys_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.multiGetKeys.length === 5) {
    Q.fcall(this._handler.multiGetKeys.bind(this._handler),
      args.tableName,
      args.key,
      args.fieldRange,
      args.includedTables,
      args.readOptions
    ).then(function(result) {
      var result_obj = new ONDB_multiGetKeys_result({success: result});
      output.writeMessageBegin("multiGetKeys", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result = new ONDB_multiGetKeys_result(err);
        output.writeMessageBegin("multiGetKeys", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiGetKeys", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.multiGetKeys(args.tableName, args.key, args.fieldRange, args.includedTables, args.readOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException) {
        result_obj = new ONDB_multiGetKeys_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("multiGetKeys", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("multiGetKeys", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_tableIterator = function(seqid, input, output) {
  var args = new ONDB_tableIterator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.tableIterator.length === 7) {
    Q.fcall(this._handler.tableIterator.bind(this._handler),
      args.tableName,
      args.key,
      args.fieldRange,
      args.includedTables,
      args.readOptions,
      args.direction,
      args.maxResults
    ).then(function(result) {
      var result_obj = new ONDB_tableIterator_result({success: result});
      output.writeMessageBegin("tableIterator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result = new ONDB_tableIterator_result(err);
        output.writeMessageBegin("tableIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.tableIterator(args.tableName, args.key, args.fieldRange, args.includedTables, args.readOptions, args.direction, args.maxResults, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result_obj = new ONDB_tableIterator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("tableIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_tableIteratorMulti = function(seqid, input, output) {
  var args = new ONDB_tableIteratorMulti_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.tableIteratorMulti.length === 8) {
    Q.fcall(this._handler.tableIteratorMulti.bind(this._handler),
      args.tableName,
      args.keys,
      args.fieldRange,
      args.includedTables,
      args.readOptions,
      args.direction,
      args.maxResults,
      args.numParallelIterHint
    ).then(function(result) {
      var result_obj = new ONDB_tableIteratorMulti_result({success: result});
      output.writeMessageBegin("tableIteratorMulti", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result = new ONDB_tableIteratorMulti_result(err);
        output.writeMessageBegin("tableIteratorMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableIteratorMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.tableIteratorMulti(args.tableName, args.keys, args.fieldRange, args.includedTables, args.readOptions, args.direction, args.maxResults, args.numParallelIterHint, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result_obj = new ONDB_tableIteratorMulti_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("tableIteratorMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableIteratorMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_iteratorNext = function(seqid, input, output) {
  var args = new ONDB_iteratorNext_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.iteratorNext.length === 1) {
    Q.fcall(this._handler.iteratorNext.bind(this._handler),
      args.iteratorId
    ).then(function(result) {
      var result_obj = new ONDB_iteratorNext_result({success: result});
      output.writeMessageBegin("iteratorNext", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result = new ONDB_iteratorNext_result(err);
        output.writeMessageBegin("iteratorNext", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("iteratorNext", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.iteratorNext(args.iteratorId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result_obj = new ONDB_iteratorNext_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("iteratorNext", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("iteratorNext", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_iteratorClose = function(seqid, input, output) {
  var args = new ONDB_iteratorClose_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.iteratorClose.length === 1) {
    Q.fcall(this._handler.iteratorClose.bind(this._handler),
      args.iteratorId
    ).then(function(result) {
      var result_obj = new ONDB_iteratorClose_result({success: result});
      output.writeMessageBegin("iteratorClose", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("iteratorClose", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.iteratorClose(args.iteratorId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ONDB_iteratorClose_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("iteratorClose", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("iteratorClose", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_tableKeyIterator = function(seqid, input, output) {
  var args = new ONDB_tableKeyIterator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.tableKeyIterator.length === 7) {
    Q.fcall(this._handler.tableKeyIterator.bind(this._handler),
      args.tableName,
      args.key,
      args.fieldRange,
      args.includedTables,
      args.readOptions,
      args.direction,
      args.maxResults
    ).then(function(result) {
      var result_obj = new ONDB_tableKeyIterator_result({success: result});
      output.writeMessageBegin("tableKeyIterator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result = new ONDB_tableKeyIterator_result(err);
        output.writeMessageBegin("tableKeyIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableKeyIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.tableKeyIterator(args.tableName, args.key, args.fieldRange, args.includedTables, args.readOptions, args.direction, args.maxResults, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result_obj = new ONDB_tableKeyIterator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("tableKeyIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableKeyIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_tableKeyIteratorMulti = function(seqid, input, output) {
  var args = new ONDB_tableKeyIteratorMulti_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.tableKeyIteratorMulti.length === 8) {
    Q.fcall(this._handler.tableKeyIteratorMulti.bind(this._handler),
      args.tableName,
      args.keys,
      args.fieldRange,
      args.includedTables,
      args.readOptions,
      args.direction,
      args.maxResults,
      args.numParallelIterHint
    ).then(function(result) {
      var result_obj = new ONDB_tableKeyIteratorMulti_result({success: result});
      output.writeMessageBegin("tableKeyIteratorMulti", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result = new ONDB_tableKeyIteratorMulti_result(err);
        output.writeMessageBegin("tableKeyIteratorMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableKeyIteratorMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.tableKeyIteratorMulti(args.tableName, args.keys, args.fieldRange, args.includedTables, args.readOptions, args.direction, args.maxResults, args.numParallelIterHint, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result_obj = new ONDB_tableKeyIteratorMulti_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("tableKeyIteratorMulti", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableKeyIteratorMulti", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_indexIterator = function(seqid, input, output) {
  var args = new ONDB_indexIterator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.indexIterator.length === 8) {
    Q.fcall(this._handler.indexIterator.bind(this._handler),
      args.tableName,
      args.indexName,
      args.key,
      args.fieldRange,
      args.includedTables,
      args.readOptions,
      args.direction,
      args.maxResults
    ).then(function(result) {
      var result_obj = new ONDB_indexIterator_result({success: result});
      output.writeMessageBegin("indexIterator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result = new ONDB_indexIterator_result(err);
        output.writeMessageBegin("indexIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("indexIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.indexIterator(args.tableName, args.indexName, args.key, args.fieldRange, args.includedTables, args.readOptions, args.direction, args.maxResults, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result_obj = new ONDB_indexIterator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("indexIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("indexIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_indexKeyIterator = function(seqid, input, output) {
  var args = new ONDB_indexKeyIterator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.indexKeyIterator.length === 8) {
    Q.fcall(this._handler.indexKeyIterator.bind(this._handler),
      args.tableName,
      args.indexName,
      args.key,
      args.fieldRange,
      args.includedTables,
      args.readOptions,
      args.direction,
      args.maxResults
    ).then(function(result) {
      var result_obj = new ONDB_indexKeyIterator_result({success: result});
      output.writeMessageBegin("indexKeyIterator", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result = new ONDB_indexKeyIterator_result(err);
        output.writeMessageBegin("indexKeyIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("indexKeyIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.indexKeyIterator(args.tableName, args.indexName, args.key, args.fieldRange, args.includedTables, args.readOptions, args.direction, args.maxResults, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TConsistencyException || err instanceof ttypes.TRequestTimeoutException || err instanceof ttypes.TFaultException || err instanceof ttypes.TProxyException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TIteratorTimeoutException) {
        result_obj = new ONDB_indexKeyIterator_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("indexKeyIterator", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("indexKeyIterator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_refreshTables = function(seqid, input, output) {
  var args = new ONDB_refreshTables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.refreshTables.length === 0) {
    Q.fcall(this._handler.refreshTables.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ONDB_refreshTables_result({success: result});
      output.writeMessageBegin("refreshTables", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException) {
        result = new ONDB_refreshTables_result(err);
        output.writeMessageBegin("refreshTables", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refreshTables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.refreshTables(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException) {
        result_obj = new ONDB_refreshTables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("refreshTables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refreshTables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executeSync = function(seqid, input, output) {
  var args = new ONDB_executeSync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executeSync.length === 1) {
    Q.fcall(this._handler.executeSync.bind(this._handler),
      args.statement
    ).then(function(result) {
      var result_obj = new ONDB_executeSync_result({success: result});
      output.writeMessageBegin("executeSync", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executeSync_result(err);
        output.writeMessageBegin("executeSync", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeSync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executeSync(args.statement, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executeSync_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executeSync", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeSync", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_execute = function(seqid, input, output) {
  var args = new ONDB_execute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.execute.length === 1) {
    Q.fcall(this._handler.execute.bind(this._handler),
      args.statement
    ).then(function(result) {
      var result_obj = new ONDB_execute_result({success: result});
      output.writeMessageBegin("execute", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_execute_result(err);
        output.writeMessageBegin("execute", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.execute(args.statement, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_execute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("execute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("execute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureCancel = function(seqid, input, output) {
  var args = new ONDB_executionFutureCancel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureCancel.length === 2) {
    Q.fcall(this._handler.executionFutureCancel.bind(this._handler),
      args.planId,
      args.mayInterruptIfRunning
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureCancel_result({success: result});
      output.writeMessageBegin("executionFutureCancel", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureCancel_result(err);
        output.writeMessageBegin("executionFutureCancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureCancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureCancel(args.planId, args.mayInterruptIfRunning, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureCancel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureCancel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureCancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureGet = function(seqid, input, output) {
  var args = new ONDB_executionFutureGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureGet.length === 1) {
    Q.fcall(this._handler.executionFutureGet.bind(this._handler),
      args.planId
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureGet_result({success: result});
      output.writeMessageBegin("executionFutureGet", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TCancellationException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureGet_result(err);
        output.writeMessageBegin("executionFutureGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureGet(args.planId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TCancellationException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureGetTimeout = function(seqid, input, output) {
  var args = new ONDB_executionFutureGetTimeout_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureGetTimeout.length === 2) {
    Q.fcall(this._handler.executionFutureGetTimeout.bind(this._handler),
      args.planId,
      args.timeoutMs
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureGetTimeout_result({success: result});
      output.writeMessageBegin("executionFutureGetTimeout", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TTimeoutException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureGetTimeout_result(err);
        output.writeMessageBegin("executionFutureGetTimeout", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGetTimeout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureGetTimeout(args.planId, args.timeoutMs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TTimeoutException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureGetTimeout_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureGetTimeout", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGetTimeout", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureUpdateStatus = function(seqid, input, output) {
  var args = new ONDB_executionFutureUpdateStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureUpdateStatus.length === 1) {
    Q.fcall(this._handler.executionFutureUpdateStatus.bind(this._handler),
      args.planId
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureUpdateStatus_result({success: result});
      output.writeMessageBegin("executionFutureUpdateStatus", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureUpdateStatus_result(err);
        output.writeMessageBegin("executionFutureUpdateStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureUpdateStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureUpdateStatus(args.planId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureUpdateStatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureUpdateStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureUpdateStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executeSyncV2 = function(seqid, input, output) {
  var args = new ONDB_executeSyncV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executeSyncV2.length === 1) {
    Q.fcall(this._handler.executeSyncV2.bind(this._handler),
      args.statement
    ).then(function(result) {
      var result_obj = new ONDB_executeSyncV2_result({success: result});
      output.writeMessageBegin("executeSyncV2", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executeSyncV2_result(err);
        output.writeMessageBegin("executeSyncV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeSyncV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executeSyncV2(args.statement, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executeSyncV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executeSyncV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeSyncV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executeV2 = function(seqid, input, output) {
  var args = new ONDB_executeV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executeV2.length === 1) {
    Q.fcall(this._handler.executeV2.bind(this._handler),
      args.statement
    ).then(function(result) {
      var result_obj = new ONDB_executeV2_result({success: result});
      output.writeMessageBegin("executeV2", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executeV2_result(err);
        output.writeMessageBegin("executeV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executeV2(args.statement, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executeV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executeV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureCancelV2 = function(seqid, input, output) {
  var args = new ONDB_executionFutureCancelV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureCancelV2.length === 2) {
    Q.fcall(this._handler.executionFutureCancelV2.bind(this._handler),
      args.executionId,
      args.mayInterruptIfRunning
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureCancelV2_result({success: result});
      output.writeMessageBegin("executionFutureCancelV2", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureCancelV2_result(err);
        output.writeMessageBegin("executionFutureCancelV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureCancelV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureCancelV2(args.executionId, args.mayInterruptIfRunning, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureCancelV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureCancelV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureCancelV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureGetV2 = function(seqid, input, output) {
  var args = new ONDB_executionFutureGetV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureGetV2.length === 1) {
    Q.fcall(this._handler.executionFutureGetV2.bind(this._handler),
      args.executionId
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureGetV2_result({success: result});
      output.writeMessageBegin("executionFutureGetV2", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TCancellationException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureGetV2_result(err);
        output.writeMessageBegin("executionFutureGetV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGetV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureGetV2(args.executionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TCancellationException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureGetV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureGetV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGetV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureGetTimeoutV2 = function(seqid, input, output) {
  var args = new ONDB_executionFutureGetTimeoutV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureGetTimeoutV2.length === 2) {
    Q.fcall(this._handler.executionFutureGetTimeoutV2.bind(this._handler),
      args.executionId,
      args.timeoutMs
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureGetTimeoutV2_result({success: result});
      output.writeMessageBegin("executionFutureGetTimeoutV2", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TTimeoutException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureGetTimeoutV2_result(err);
        output.writeMessageBegin("executionFutureGetTimeoutV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGetTimeoutV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureGetTimeoutV2(args.executionId, args.timeoutMs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TInterruptedException || err instanceof ttypes.TTimeoutException || err instanceof ttypes.TExecutionException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureGetTimeoutV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureGetTimeoutV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureGetTimeoutV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executionFutureUpdateStatusV2 = function(seqid, input, output) {
  var args = new ONDB_executionFutureUpdateStatusV2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executionFutureUpdateStatusV2.length === 1) {
    Q.fcall(this._handler.executionFutureUpdateStatusV2.bind(this._handler),
      args.executionId
    ).then(function(result) {
      var result_obj = new ONDB_executionFutureUpdateStatusV2_result({success: result});
      output.writeMessageBegin("executionFutureUpdateStatusV2", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executionFutureUpdateStatusV2_result(err);
        output.writeMessageBegin("executionFutureUpdateStatusV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureUpdateStatusV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executionFutureUpdateStatusV2(args.executionId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executionFutureUpdateStatusV2_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executionFutureUpdateStatusV2", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executionFutureUpdateStatusV2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_executeUpdates = function(seqid, input, output) {
  var args = new ONDB_executeUpdates_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executeUpdates.length === 2) {
    Q.fcall(this._handler.executeUpdates.bind(this._handler),
      args.operations,
      args.writeOptions
    ).then(function(result) {
      var result_obj = new ONDB_executeUpdates_result({success: result});
      output.writeMessageBegin("executeUpdates", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TDurabilityException || err instanceof ttypes.TTableOpExecutionException || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result = new ONDB_executeUpdates_result(err);
        output.writeMessageBegin("executeUpdates", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeUpdates", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.executeUpdates(args.operations, args.writeOptions, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TDurabilityException || err instanceof ttypes.TTableOpExecutionException || err instanceof ttypes.TFaultException || err instanceof ttypes.TIllegalArgumentException || err instanceof ttypes.TProxyException) {
        result_obj = new ONDB_executeUpdates_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executeUpdates", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeUpdates", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ONDBProcessor.prototype.process_getOptions = function(seqid, input, output) {
  var args = new ONDB_getOptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOptions.length === 0) {
    Q.fcall(this._handler.getOptions.bind(this._handler)
    ).then(function(result) {
      var result_obj = new ONDB_getOptions_result({success: result});
      output.writeMessageBegin("getOptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("getOptions", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getOptions(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ONDB_getOptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
